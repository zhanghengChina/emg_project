// Generated by gencpp from file move_ur_script/joint_value_target.msg
// DO NOT EDIT!


#ifndef MOVE_UR_SCRIPT_MESSAGE_JOINT_VALUE_TARGET_H
#define MOVE_UR_SCRIPT_MESSAGE_JOINT_VALUE_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace move_ur_script
{
template <class ContainerAllocator>
struct joint_value_target_
{
  typedef joint_value_target_<ContainerAllocator> Type;

  joint_value_target_()
    : joint_value()  {
    }
  joint_value_target_(const ContainerAllocator& _alloc)
    : joint_value(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_value_type;
  _joint_value_type joint_value;




  typedef boost::shared_ptr< ::move_ur_script::joint_value_target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_ur_script::joint_value_target_<ContainerAllocator> const> ConstPtr;

}; // struct joint_value_target_

typedef ::move_ur_script::joint_value_target_<std::allocator<void> > joint_value_target;

typedef boost::shared_ptr< ::move_ur_script::joint_value_target > joint_value_targetPtr;
typedef boost::shared_ptr< ::move_ur_script::joint_value_target const> joint_value_targetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_ur_script::joint_value_target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_ur_script::joint_value_target_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace move_ur_script

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'move_ur_script': ['/home/leon/emg_project/src/move_ur_script/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::move_ur_script::joint_value_target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_ur_script::joint_value_target_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_ur_script::joint_value_target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_ur_script::joint_value_target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_ur_script::joint_value_target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_ur_script::joint_value_target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_ur_script::joint_value_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf4f9efdddc421a6b33ade84387cb1fe";
  }

  static const char* value(const ::move_ur_script::joint_value_target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf4f9efdddc421a6ULL;
  static const uint64_t static_value2 = 0xb33ade84387cb1feULL;
};

template<class ContainerAllocator>
struct DataType< ::move_ur_script::joint_value_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_ur_script/joint_value_target";
  }

  static const char* value(const ::move_ur_script::joint_value_target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_ur_script::joint_value_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] joint_value\n\
";
  }

  static const char* value(const ::move_ur_script::joint_value_target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_ur_script::joint_value_target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joint_value_target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_ur_script::joint_value_target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_ur_script::joint_value_target_<ContainerAllocator>& v)
  {
    s << indent << "joint_value[]" << std::endl;
    for (size_t i = 0; i < v.joint_value.size(); ++i)
    {
      s << indent << "  joint_value[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_value[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_UR_SCRIPT_MESSAGE_JOINT_VALUE_TARGET_H
